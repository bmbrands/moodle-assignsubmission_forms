{"version":3,"file":"forms.min.js","sources":["../src/forms.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * TODO describe module forms\r\n *\r\n * @module     assignsubmission_forms/forms\r\n * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>, Jonas Rehkopp <jonas.rehkopp@polizei.nrw.de>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport {getString} from 'core/str';\r\nimport Repository from './repository';\r\nimport $ from 'jquery';\r\nimport {debounce} from 'core/utils';\r\n\r\nconst DEBOUNCE_TIMER = 2000;\r\n\r\nclass forms {\r\n    constructor() {\r\n        this.rootElement = document.querySelector('.forms-form');\r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        const textareas = this.rootElement.querySelectorAll('textarea');\r\n        // Create a new <div> with a word counter after each textarea, give it the id of the textarea + '-wordcounter'\r\n        textareas.forEach(async(textarea) => {\r\n            const areaid = textarea.dataset.fieldid + '-wordcounter';\r\n            const statusid = textarea.dataset.fieldid + '-status';\r\n            const count = textarea.value.split(/\\s+/).filter((word) => word.length > 0).length;\r\n            const {html, js} = await Templates.renderForPromise('assignsubmission_forms/fieldactions',\r\n                {areaid: areaid, statusid: statusid, count: count});\r\n            Templates.appendNodeContents(textarea.parentNode, html, js);\r\n        });\r\n        //Modify the input-Element by adding two classes \"needs-validation was-validated\" by EventListener (onfocusout)\r\n        //And delete the classes on focus\r\n        this.addValidationClassesToInput();\r\n\r\n        this.bindEvents();\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds validation classes and event listeners to input and textarea elements\r\n     * for client-side validation feedback.\r\n     * But only if the field is required\r\n     */\r\n    addValidationClassesToInput() {\r\n        const setValidationState = (element) => {\r\n            if (element.value.trim() === '') {\r\n                element.classList.add('is-invalid');\r\n            } else {\r\n                element.classList.remove('is-invalid');\r\n            }\r\n        };\r\n\r\n        const handleFocusOut = (element) => {\r\n            element.classList.add('needs-validation', 'was-validated');\r\n            setValidationState(element);\r\n        };\r\n\r\n        const handleFocus = (element) => {\r\n            element.classList.remove('needs-validation', 'was-validated');\r\n            setValidationState(element);\r\n        };\r\n\r\n        const handleKeyUp = (element) => {\r\n            setValidationState(element);\r\n        };\r\n\r\n        // Handle input fields\r\n        const inputs = this.rootElement.querySelectorAll('input');\r\n        inputs.forEach(input => {\r\n            if (input.hasAttribute('aria-required')) {\r\n                input.addEventListener('focusout', () => handleFocusOut(input));\r\n                input.addEventListener('focus', () => handleFocus(input));\r\n                input.addEventListener('keyup', () => handleKeyUp(input));\r\n            }\r\n        });\r\n\r\n        // Handle textarea fields\r\n        const textareas = this.rootElement.querySelectorAll('textarea');\r\n        textareas.forEach(textarea => {\r\n            if (textarea.hasAttribute('aria-required')) {\r\n                textarea.addEventListener('focusout', () => handleFocusOut(textarea));\r\n                textarea.addEventListener('focus', () => handleFocus(textarea));\r\n                textarea.addEventListener('keyup', () => handleKeyUp(textarea));\r\n            }\r\n        });\r\n    }\r\n\r\n    async bindEvents() {\r\n        // Bind events here\r\n        const textareas = this.rootElement.querySelectorAll('textarea');\r\n        const inputs = this.rootElement.querySelectorAll('input[type=\"text\"]');\r\n        const checkboxes = this.rootElement.querySelectorAll('input[type=\"checkbox\"]');\r\n        const dateSelectors = this.rootElement.querySelectorAll('select');\r\n        const saveDraftDebounce = debounce(this.saveDraft, DEBOUNCE_TIMER);\r\n\r\n        textareas.forEach(async(textarea) => {\r\n            textarea.addEventListener('input', async(event) => {\r\n                const wordCounter = document.getElementById(event.target.dataset.fieldid + '-wordcounter');\r\n                const count = event.target.value.split(/\\s+/).filter((word) => word.length > 0).length;\r\n                wordCounter.innerHTML = await getString('words', 'assignsubmission_forms', count);\r\n                saveDraftDebounce(event.target);\r\n            });\r\n        });\r\n        inputs.forEach(async(input) => {\r\n            input.addEventListener('input', async(event) => {\r\n                saveDraftDebounce(event.target);\r\n            });\r\n        });\r\n        checkboxes.forEach(async(checkbox) => {\r\n            checkbox.addEventListener('input', async(event) => {\r\n                saveDraftDebounce(event.target);\r\n            });\r\n        });\r\n        dateSelectors.forEach(async(dateSelector) => {\r\n            dateSelector.addEventListener('input', async(event) => {\r\n                saveDraftDebounce(event.target);\r\n            });\r\n        });\r\n        document.addEventListener('click', async(event) => {\r\n            const popOvers = document.querySelectorAll('[data-toggle=\"popover\"]');\r\n            const currentPopover = event.target.closest('[data-toggle=\"popover\"]');\r\n            if (popOvers.length > 0) {\r\n                popOvers.forEach((popover) => {\r\n                    if (popover !== currentPopover) {\r\n                        $(popover).popover('hide');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Save a draft of the field.\r\n     * @param {HTMLElement} field The field to save.\r\n     */\r\n    async saveDraft(field) {\r\n        let fieldname = '';\r\n        let hiddenfield = '';\r\n        let data = '';\r\n        let value = '';\r\n\r\n        if(field.type == 'textarea') {\r\n            const statusdiv = document.getElementById(field.dataset.fieldid + '-status');\r\n            statusdiv.classList.add('saving');\r\n        }else if(field.type == 'select-one') {\r\n            //check if there is \"[day]\", \"[month]\" or \"[year]\"\r\n            if(field.name.includes('[day]')) {\r\n                fieldname = field.name.replace('[day]', '');\r\n            }else if(field.name.includes('[month]')) {\r\n                fieldname = field.name.replace('[month]', '');\r\n            }else if(field.name.includes('[year]')) {\r\n                fieldname = field.name.replace('[year]', '');\r\n            }\r\n            hiddenfield = document.getElementById('hidden_' + fieldname);\r\n        }else{\r\n            hiddenfield = document.getElementById('hidden_' + field.name);\r\n        }\r\n        if(hiddenfield) {\r\n            value = '';\r\n            switch(field.type) {\r\n                case 'checkbox':\r\n                    value = field.checked;\r\n                    break;\r\n                case 'select-one':\r\n                    let day = document.querySelector('select[name=\"' + fieldname + '[day]\"]').value;\r\n                    let month = document.querySelector('select[name=\"' + fieldname + '[month]\"]').value;\r\n                    let year = document.querySelector('select[name=\"' + fieldname + '[year]\"]').value;\r\n                    value = day + month + year;\r\n                    //convert to timestamp\r\n                    value = new Date(year, month - 1, day).getTime();\r\n                    break;\r\n                default:\r\n                    value = field.value;\r\n                    break;\r\n            }\r\n            data = {\r\n                assignmentid: parseInt(hiddenfield.dataset.assignmentid),\r\n                fieldid: parseInt(hiddenfield.dataset.fieldid),\r\n                value: value,\r\n            };\r\n        }else{\r\n            data = {\r\n                assignmentid: parseInt(field.dataset.assignmentid),\r\n                fieldid: parseInt(field.dataset.fieldid),\r\n                value: field.value,\r\n            };\r\n        }\r\n        const response = await Repository.storeDraft(data);\r\n\r\n        if(field.type == 'textarea' && response) {\r\n            statusdiv.classList.remove('saving');\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialise\r\n * @param {HTMLElement} element The element.\r\n * @param {String} courseid The courseid.\r\n */\r\nconst init = () => {\r\n    new forms();\r\n};\r\n\r\nexport default {\r\n    init: init,\r\n};\r\n"],"names":["_interopRequireDefault","e","__esModule","default","_templates","_repository","_jquery","forms","constructor","this","rootElement","document","querySelector","init","querySelectorAll","forEach","async","areaid","textarea","dataset","fieldid","statusid","count","value","split","filter","word","length","html","js","Templates","renderForPromise","appendNodeContents","parentNode","addValidationClassesToInput","bindEvents","setValidationState","element","trim","classList","add","remove","handleFocusOut","handleFocus","handleKeyUp","input","hasAttribute","addEventListener","textareas","inputs","checkboxes","dateSelectors","saveDraftDebounce","debounce","saveDraft","wordCounter","getElementById","event","target","innerHTML","getString","checkbox","dateSelector","popOvers","currentPopover","closest","popover","$","field","fieldname","hiddenfield","data","type","name","includes","replace","checked","day","month","year","Date","getTime","assignmentid","parseInt","response","Repository","storeDraft","statusdiv","_exports"],"mappings":"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"}